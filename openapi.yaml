openapi: 3.0.1
info:
  title: Nezu Mail
  version: 0.1.0
tags:
- name: mail
  description: Email api
- name: token
  description: Acess token api
- name: domain
  description: Domain whitelist api
servers:
  - url: /api
paths:
  /mail:
    get:
      tags:
      - mail
      summary: Find emails
      parameters:
      - name: sender
        in: query
        description: Sender email addres to use as a filter, empty for all senders
        schema:
          type: string
      - name: inbox
        description: inbox email addres to use as a filter, empty for all inboxes
        in: query
        schema:
          type: string
      - name: subject
        description: subject to use as a filter, empty for all subjects (`*` OR `%` wildcards are accepted)
        in: query
        schema:
          type: string
      - name: skip
        description: number of emails to skip
        in: query
        schema:
          type: integer
          default: 0
      - name: limit
        description: number of emails to show
        in: query
        schema:
          type: integer
          default: 25
      - name: search
        description: search string (`*` OR `%` wildcards are accepted)
        in: query
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Mail'
                  total:
                    type: integer
                    example: 1
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: No emails found matching query
      security:
      - bearerAuth: []
      - basicAuth: []
  /mail/wait:
    get:
      tags:
      - mail
      summary: Wait for an email
      parameters:
      - name: sender
        in: query
        description: Sender email addres to use as a filter, empty for all senders
        schema:
          type: string
      - name: inbox
        description: inbox email addres to use as a filter, empty for all inboxes
        in: query
        schema:
          type: string
      - name: subject
        description: part of the subject to use as a filter
        in: query
        schema:
          type: string
      - name: timeout
        description: max time to wait
        in: query
        schema:
          type: integer
          default: 10
      - name: delete
        description: delete email after reciving
        in: query
        schema:
          type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mail'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '408':
          description: timeout
      security:
      - bearerAuth: []
      - basicAuth: []
  /mail/{id}:
    get:
      tags:
      - mail
      summary: Get mail by id
      parameters:
      - name: id
        required: true
        in: path
        description: id of the mail to get
        schema:
          type: integer
      responses:
        '200':
          description: successful operation
          content:
            text/html:
              schema:
                type: string
              example: '<html><body>This is the email body</body></html>'
            application/json:
              schema:
                $ref: '#/components/schemas/Mail'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Email not found
      security:
      - bearerAuth: []
      - basicAuth: []
    delete:
      tags:
      - mail
      summary: Delete mail by id
      parameters:
      - name: id
        in: path
        required: true
        description: id fo the email to get
        schema:
          type: integer
      responses:
        '200':
          description: successful operation
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Email not found
      security:
      - bearerAuth: []
      - basicAuth: []
  /token:
    get:
      tags:
      - token
      summary: List all tokens
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccessToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - basicAuth: []
    post:
      tags:
      - token
      summary: Add new token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - basicAuth: []
  /token/{token}:
    delete:
      tags:
      - token
      summary: Delete a token
      parameters:
      - name: token
        required: true
        in: path
        description: token to delete
        schema:
          type: string
      responses:
        '200':
          description: successful operation
        '404':
          description: token not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - basicAuth: []
  /domain:
    get:
      tags:
      - domain
      summary: List all domains
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "example.com"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - basicAuth: []
    post:
      tags:
      - domain
      summary: Add new domain
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                domain:
                  type: string
      responses:
        '200':
          description: successful operation
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - basicAuth: []
components:
  schemas:
    Mail:
      type: object
      required: [id, sender, inbox, subject, date]
      properties:
        id:
          type: integer
          format: int64
        sender:
          type: string
        inbox:
          type: string
        subject:
          type: string
        date:
          type: string
          format: date-time
        body:
          type: string
    AccessToken:
      type: object
      properties:
        token:
          type: string
        name:
          type: string
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    basicAuth:
      type: http
      scheme: basic
      
security:
  - bearerAuth: []
  - basicAuth: []